// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class InflationFactorUpdated extends ethereum.Event {
  get params(): InflationFactorUpdated__Params {
    return new InflationFactorUpdated__Params(this);
  }
}

export class InflationFactorUpdated__Params {
  _event: InflationFactorUpdated;

  constructor(event: InflationFactorUpdated) {
    this._event = event;
  }

  get factor(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get lastUpdated(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InflationParametersUpdated extends ethereum.Event {
  get params(): InflationParametersUpdated__Params {
    return new InflationParametersUpdated__Params(this);
  }
}

export class InflationParametersUpdated__Params {
  _event: InflationParametersUpdated;

  constructor(event: InflationParametersUpdated) {
    this._event = event;
  }

  get rate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get updatePeriod(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lastUpdated(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RegistrySet extends ethereum.Event {
  get params(): RegistrySet__Params {
    return new RegistrySet__Params(this);
  }
}

export class RegistrySet__Params {
  _event: RegistrySet;

  constructor(event: RegistrySet) {
    this._event = event;
  }

  get registryAddress(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TransferComment extends ethereum.Event {
  get params(): TransferComment__Params {
    return new TransferComment__Params(this);
  }
}

export class TransferComment__Params {
  _event: TransferComment;

  constructor(event: TransferComment) {
    this._event = event;
  }

  get comment(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class NFTRewardsVault__fractionMulExpResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class NFTRewardsVault__getInflationParametersResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class NFTRewardsVault__getVersionNumberResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }
}

export class NFTRewardsVault extends ethereum.SmartContract {
  static bind(address: Address): NFTRewardsVault {
    return new NFTRewardsVault("NFTRewardsVault", address);
  }

  allowance(accountOwner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(accountOwner),
        ethereum.Value.fromAddress(spender)
      ]
    );

    return result[0].toBigInt();
  }

  try_allowance(
    accountOwner: Address,
    spender: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(accountOwner),
        ethereum.Value.fromAddress(spender)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(accountOwner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(accountOwner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(accountOwner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(accountOwner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  burn(value: BigInt): boolean {
    let result = super.call("burn", "burn(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_burn(value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("burn", "burn(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkProofOfPossession(
    sender: Address,
    blsKey: Bytes,
    blsPop: Bytes
  ): boolean {
    let result = super.call(
      "checkProofOfPossession",
      "checkProofOfPossession(address,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromBytes(blsKey),
        ethereum.Value.fromBytes(blsPop)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkProofOfPossession(
    sender: Address,
    blsKey: Bytes,
    blsPop: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkProofOfPossession",
      "checkProofOfPossession(address,bytes,bytes):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromBytes(blsKey),
        ethereum.Value.fromBytes(blsPop)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, value: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  fractionMulExp(
    aNumerator: BigInt,
    aDenominator: BigInt,
    bNumerator: BigInt,
    bDenominator: BigInt,
    exponent: BigInt,
    _decimals: BigInt
  ): NFTRewardsVault__fractionMulExpResult {
    let result = super.call(
      "fractionMulExp",
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(aNumerator),
        ethereum.Value.fromUnsignedBigInt(aDenominator),
        ethereum.Value.fromUnsignedBigInt(bNumerator),
        ethereum.Value.fromUnsignedBigInt(bDenominator),
        ethereum.Value.fromUnsignedBigInt(exponent),
        ethereum.Value.fromUnsignedBigInt(_decimals)
      ]
    );

    return new NFTRewardsVault__fractionMulExpResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_fractionMulExp(
    aNumerator: BigInt,
    aDenominator: BigInt,
    bNumerator: BigInt,
    bDenominator: BigInt,
    exponent: BigInt,
    _decimals: BigInt
  ): ethereum.CallResult<NFTRewardsVault__fractionMulExpResult> {
    let result = super.tryCall(
      "fractionMulExp",
      "fractionMulExp(uint256,uint256,uint256,uint256,uint256,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(aNumerator),
        ethereum.Value.fromUnsignedBigInt(aDenominator),
        ethereum.Value.fromUnsignedBigInt(bNumerator),
        ethereum.Value.fromUnsignedBigInt(bDenominator),
        ethereum.Value.fromUnsignedBigInt(exponent),
        ethereum.Value.fromUnsignedBigInt(_decimals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTRewardsVault__fractionMulExpResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getBlockNumberFromHeader(header: Bytes): BigInt {
    let result = super.call(
      "getBlockNumberFromHeader",
      "getBlockNumberFromHeader(bytes):(uint256)",
      [ethereum.Value.fromBytes(header)]
    );

    return result[0].toBigInt();
  }

  try_getBlockNumberFromHeader(header: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockNumberFromHeader",
      "getBlockNumberFromHeader(bytes):(uint256)",
      [ethereum.Value.fromBytes(header)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEpochNumber(): BigInt {
    let result = super.call("getEpochNumber", "getEpochNumber():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getEpochNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEpochNumber",
      "getEpochNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEpochNumberOfBlock(blockNumber: BigInt): BigInt {
    let result = super.call(
      "getEpochNumberOfBlock",
      "getEpochNumberOfBlock(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return result[0].toBigInt();
  }

  try_getEpochNumberOfBlock(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getEpochNumberOfBlock",
      "getEpochNumberOfBlock(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getEpochSize(): BigInt {
    let result = super.call("getEpochSize", "getEpochSize():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getEpochSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getEpochSize", "getEpochSize():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getExchangeRegistryId(): Bytes {
    let result = super.call(
      "getExchangeRegistryId",
      "getExchangeRegistryId():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_getExchangeRegistryId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getExchangeRegistryId",
      "getExchangeRegistryId():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getInflationParameters(): NFTRewardsVault__getInflationParametersResult {
    let result = super.call(
      "getInflationParameters",
      "getInflationParameters():(uint256,uint256,uint256,uint256)",
      []
    );

    return new NFTRewardsVault__getInflationParametersResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getInflationParameters(): ethereum.CallResult<
    NFTRewardsVault__getInflationParametersResult
  > {
    let result = super.tryCall(
      "getInflationParameters",
      "getInflationParameters():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTRewardsVault__getInflationParametersResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  getParentSealBitmap(blockNumber: BigInt): Bytes {
    let result = super.call(
      "getParentSealBitmap",
      "getParentSealBitmap(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return result[0].toBytes();
  }

  try_getParentSealBitmap(blockNumber: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getParentSealBitmap",
      "getParentSealBitmap(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getVerifiedSealBitmapFromHeader(header: Bytes): Bytes {
    let result = super.call(
      "getVerifiedSealBitmapFromHeader",
      "getVerifiedSealBitmapFromHeader(bytes):(bytes32)",
      [ethereum.Value.fromBytes(header)]
    );

    return result[0].toBytes();
  }

  try_getVerifiedSealBitmapFromHeader(
    header: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getVerifiedSealBitmapFromHeader",
      "getVerifiedSealBitmapFromHeader(bytes):(bytes32)",
      [ethereum.Value.fromBytes(header)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getVersionNumber(): NFTRewardsVault__getVersionNumberResult {
    let result = super.call(
      "getVersionNumber",
      "getVersionNumber():(uint256,uint256,uint256,uint256)",
      []
    );

    return new NFTRewardsVault__getVersionNumberResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_getVersionNumber(): ethereum.CallResult<
    NFTRewardsVault__getVersionNumberResult
  > {
    let result = super.tryCall(
      "getVersionNumber",
      "getVersionNumber():(uint256,uint256,uint256,uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new NFTRewardsVault__getVersionNumberResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  hashHeader(header: Bytes): Bytes {
    let result = super.call("hashHeader", "hashHeader(bytes):(bytes32)", [
      ethereum.Value.fromBytes(header)
    ]);

    return result[0].toBytes();
  }

  try_hashHeader(header: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("hashHeader", "hashHeader(bytes):(bytes32)", [
      ethereum.Value.fromBytes(header)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  increaseAllowance(spender: Address, value: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOwner(): boolean {
    let result = super.call("isOwner", "isOwner():(bool)", []);

    return result[0].toBoolean();
  }

  try_isOwner(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOwner", "isOwner():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  minQuorumSize(blockNumber: BigInt): BigInt {
    let result = super.call(
      "minQuorumSize",
      "minQuorumSize(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return result[0].toBigInt();
  }

  try_minQuorumSize(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minQuorumSize",
      "minQuorumSize(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minQuorumSizeInCurrentSet(): BigInt {
    let result = super.call(
      "minQuorumSizeInCurrentSet",
      "minQuorumSizeInCurrentSet():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minQuorumSizeInCurrentSet(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minQuorumSizeInCurrentSet",
      "minQuorumSizeInCurrentSet():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mint(to: Address, value: BigInt): boolean {
    let result = super.call("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_mint(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("mint", "mint(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  numberValidatorsInCurrentSet(): BigInt {
    let result = super.call(
      "numberValidatorsInCurrentSet",
      "numberValidatorsInCurrentSet():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_numberValidatorsInCurrentSet(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberValidatorsInCurrentSet",
      "numberValidatorsInCurrentSet():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberValidatorsInSet(blockNumber: BigInt): BigInt {
    let result = super.call(
      "numberValidatorsInSet",
      "numberValidatorsInSet(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return result[0].toBigInt();
  }

  try_numberValidatorsInSet(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberValidatorsInSet",
      "numberValidatorsInSet(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferWithComment(to: Address, value: BigInt, comment: string): boolean {
    let result = super.call(
      "transferWithComment",
      "transferWithComment(address,uint256,string):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromString(comment)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferWithComment(
    to: Address,
    value: BigInt,
    comment: string
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferWithComment",
      "transferWithComment(address,uint256,string):(bool)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value),
        ethereum.Value.fromString(comment)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  unitsToValue(units: BigInt): BigInt {
    let result = super.call("unitsToValue", "unitsToValue(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(units)
    ]);

    return result[0].toBigInt();
  }

  try_unitsToValue(units: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "unitsToValue",
      "unitsToValue(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(units)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  validatorSignerAddressFromCurrentSet(index: BigInt): Address {
    let result = super.call(
      "validatorSignerAddressFromCurrentSet",
      "validatorSignerAddressFromCurrentSet(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_validatorSignerAddressFromCurrentSet(
    index: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "validatorSignerAddressFromCurrentSet",
      "validatorSignerAddressFromCurrentSet(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validatorSignerAddressFromSet(index: BigInt, blockNumber: BigInt): Address {
    let result = super.call(
      "validatorSignerAddressFromSet",
      "validatorSignerAddressFromSet(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toAddress();
  }

  try_validatorSignerAddressFromSet(
    index: BigInt,
    blockNumber: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "validatorSignerAddressFromSet",
      "validatorSignerAddressFromSet(uint256,uint256):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(index),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  valueToUnits(value: BigInt): BigInt {
    let result = super.call("valueToUnits", "valueToUnits(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBigInt();
  }

  try_valueToUnits(value: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "valueToUnits",
      "valueToUnits(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(value)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get test(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CreditGasFeesCall extends ethereum.Call {
  get inputs(): CreditGasFeesCall__Inputs {
    return new CreditGasFeesCall__Inputs(this);
  }

  get outputs(): CreditGasFeesCall__Outputs {
    return new CreditGasFeesCall__Outputs(this);
  }
}

export class CreditGasFeesCall__Inputs {
  _call: CreditGasFeesCall;

  constructor(call: CreditGasFeesCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get feeRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get gatewayFeeRecipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get communityFund(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get refund(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get tipTxFee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get gatewayFee(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get baseTxFee(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class CreditGasFeesCall__Outputs {
  _call: CreditGasFeesCall;

  constructor(call: CreditGasFeesCall) {
    this._call = call;
  }
}

export class DebitGasFeesCall extends ethereum.Call {
  get inputs(): DebitGasFeesCall__Inputs {
    return new DebitGasFeesCall__Inputs(this);
  }

  get outputs(): DebitGasFeesCall__Outputs {
    return new DebitGasFeesCall__Outputs(this);
  }
}

export class DebitGasFeesCall__Inputs {
  _call: DebitGasFeesCall;

  constructor(call: DebitGasFeesCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DebitGasFeesCall__Outputs {
  _call: DebitGasFeesCall;

  constructor(call: DebitGasFeesCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _decimals(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get registryAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get inflationRate(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get inflationFactorUpdatePeriod(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get initialBalanceAddresses(): Array<Address> {
    return this._call.inputValues[6].value.toAddressArray();
  }

  get initialBalanceValues(): Array<BigInt> {
    return this._call.inputValues[7].value.toBigIntArray();
  }

  get exchangeIdentifier(): string {
    return this._call.inputValues[8].value.toString();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetInflationParametersCall extends ethereum.Call {
  get inputs(): SetInflationParametersCall__Inputs {
    return new SetInflationParametersCall__Inputs(this);
  }

  get outputs(): SetInflationParametersCall__Outputs {
    return new SetInflationParametersCall__Outputs(this);
  }
}

export class SetInflationParametersCall__Inputs {
  _call: SetInflationParametersCall;

  constructor(call: SetInflationParametersCall) {
    this._call = call;
  }

  get rate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get updatePeriod(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetInflationParametersCall__Outputs {
  _call: SetInflationParametersCall;

  constructor(call: SetInflationParametersCall) {
    this._call = call;
  }
}

export class SetRegistryCall extends ethereum.Call {
  get inputs(): SetRegistryCall__Inputs {
    return new SetRegistryCall__Inputs(this);
  }

  get outputs(): SetRegistryCall__Outputs {
    return new SetRegistryCall__Outputs(this);
  }
}

export class SetRegistryCall__Inputs {
  _call: SetRegistryCall;

  constructor(call: SetRegistryCall) {
    this._call = call;
  }

  get registryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRegistryCall__Outputs {
  _call: SetRegistryCall;

  constructor(call: SetRegistryCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TransferWithCommentCall extends ethereum.Call {
  get inputs(): TransferWithCommentCall__Inputs {
    return new TransferWithCommentCall__Inputs(this);
  }

  get outputs(): TransferWithCommentCall__Outputs {
    return new TransferWithCommentCall__Outputs(this);
  }
}

export class TransferWithCommentCall__Inputs {
  _call: TransferWithCommentCall;

  constructor(call: TransferWithCommentCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get comment(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class TransferWithCommentCall__Outputs {
  _call: TransferWithCommentCall;

  constructor(call: TransferWithCommentCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

const { ascTypeForProtocol, valueTypeForAsc } = require('../codegen/types')
const util = require('../codegen/util')

const entityNameByEvent = (eventName, contractName) => `${contractName}${eventName}Event`;
const entityNameByMethod = (methodName, contractName) => `${contractName}${methodName}Call`;

const getIndexedType = type => {
    if (
        type === 'string' ||
        type === 'bytes' ||
        type === 'tuple' ||
        type.match(/\[[0-9]*\]$/g)
    ) {
        return 'bytes32'
    } else {
        return type
    }
}

const abiEvents = abi =>
    util.disambiguateNames({
        values: abi.data.filter(item => item.get('type') === 'event'),
        getName: event => event.get('name'),
        setName: (event, name) => event.set('_alias', name.replace(/[^a-zA-Z0-9]/g, '')),
    })

const abiMethods = abi =>
    util.disambiguateNames({
        values: abi.data.filter(item => item.get('type') === 'function' && item.get('stateMutability') !== 'view' && item.get('stateMutability') !== 'pure'),
        getName: method => method.get('name'),
        setName: (method, name) => method.set('_alias', name.replace(/[^a-zA-Z0-9]/g, '')),
    })

const protocolTypeToGraphQL = (protocol, name) => {
    let ascType = ascTypeForProtocol(protocol, name)
    return valueTypeForAsc(ascType)
}

const generateField = ({ name, type, protocolName, indexed }) => {
    let fieldType = indexed ? getIndexedType(type) : type
    return `${name}: ${protocolTypeToGraphQL(protocolName, fieldType)}! # ${fieldType}`
}

// const generateFields = ({ index, input, parentContext = 'event'}) =>
//   input.type == 'tuple'
//     ? util
//         .unrollTuple({ value: input, path: [input.name || `param${index}`], index })
//         .map(({ path, type }) => generateField({ name: path.join('_'), type, parentContext }))
//     : [generateField({ name: input.name || (parentContext === 'event' ? `param${index}` : `value${index}`), type: input.type, indexed: (parentContext == 'event' && input.indexed) })]

const generateEventFields = ({ index, input, protocolName, parentContext = 'event' }) =>
    input.type == 'tuple'
        ? util
            .unrollTuple({ value: input, path: [input.name || `param${index}`], index })
            .map(({ path, type }) => generateField({ name: path.join('_'), type, protocolName }))
        : [generateField({ name: input.name || (parentContext === 'event' ? `param${index}` : `value${index}`), type: input.type, protocolName: protocolName, indexed: (parentContext == 'event' && input.indexed) })]

const generateEventType = (event, protocolName, contractName) => `type ${entityNameByEvent(event._alias, contractName)} @entity {
      id: ID!
      txHash: Bytes
      fromAddress: Bytes # address
      toAddress: Bytes # address
      valueTransferred: BigInt
      gasUsed: BigInt
      gasPrice: BigInt
      ${event.inputs
        .reduce(
            (acc, input, index) => {
                if (input.name == 'id') {
                    return acc
                }
                if (input.name == 'blockTimestamp') {
                    acc.shift()
                }
                return acc.concat(generateEventFields({ input, index, protocolName }))
            },
            [`blockTimestamp: BigInt! # uint256`],
        )
        .join('\n')}
    }`

const generateExampleEntityType = (protocol, contractName, events) => {
    if (protocol.hasABIs() && events.length > 0) {
        return `type ExampleEntity @entity {
  id: ID!
  count: BigInt!
  ${events[0].inputs
                .reduce((acc, input, index) => acc.concat(generateEventFields({ input, index, protocolName: protocol.name })), [])
                .slice(0, 2)
                .join('\n')}
}`
    } else {
        return `type ${contractName.slice(0, 3)}Transaction @entity {
  id: ID!
  signerId: ID!
  receiverId: ID
  output: String
  blockTimestamp: BigInt!
  blockNumber: BigInt
  kind: String!
  gasPrice: BigInt
  methodName: String!
  gasBurnt: String
  deposit: BigInt
}`
    }
}



module.exports = {
    abiEvents,
    protocolTypeToGraphQL,
    generateField,
    generateEventFields,
    generateEventType,
    generateExampleEntityType,
    abiMethods
}

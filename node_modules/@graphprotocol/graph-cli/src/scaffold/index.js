const prettier = require('prettier')
const pkginfo = require('pkginfo')(module)

const GRAPH_CLI_VERSION = process.env.GRAPH_CLI_TESTS
  // JSON.stringify should remove this key, we will install the local
  // graph-cli for the tests using `npm link` instead of fetching from npm.
  ? undefined
  // For scaffolding real subgraphs
  : `${module.exports.version}`

const {
  abiEvents,
  generateEventType,
  generateExampleEntityType,
  abiMethods
} = require('./schema')
const { generateEventIndexingHandlers } = require('./mapping')
const { getSubgraphBasename } = require('../command-helpers/subgraph')
const constant = require('../lib/constant');

module.exports = class Scaffold {
  constructor(options = {}) {
    this.protocol = options.protocol
    this.abi = options.abi
    this.indexEvents = options.indexEvents
    this.contract = options.contract
    this.network = options.network
    this.contractName = options.contractName
    this.subgraphName = options.subgraphName
    this.node = options.node
    this.fromContracts = options.fromContracts
    this.etherscanApikey = options.etherscanApikey
  }

  shouldIndexCallHandler = (network) => {
    return constant.callHandlerSupportedNetworks.includes(network);
  }

  generatePackageJson() {
    return prettier.format(
      JSON.stringify({
        name: getSubgraphBasename(this.subgraphName),
        license: 'UNLICENSED',
        scripts: {
          codegen: 'graph codegen',
          build: 'graph build',
          deploy:
            `graph deploy ` +
            `--node ${this.node} ` +
            this.subgraphName,
          'create-local': `graph create --node http://localhost:8020/ ${this.subgraphName}`,
          'remove-local': `graph remove --node http://localhost:8020/ ${this.subgraphName}`,
          'deploy-local':
            `graph deploy ` +
            `--node http://localhost:8020/ ` +
            `--ipfs http://localhost:5001 ` +
            this.subgraphName,
        },
        dependencies: {
          '@graphprotocol/graph-cli': `git+ssh://git@github.com/dapplooker/graph-cli-dlooker.git#get_0.25.1`,
          '@graphprotocol/graph-ts': `0.24.1`,
        },
      }),
      { parser: 'json' },
    )
  }

  async generateDataSource() {
    const result = [];
    const protocolManifest = this.protocol.getManifestScaffold();
    const fromContracts = this.fromContracts;
    for(let i =0; i< fromContracts.length; i++) {
      const abi = fromContracts[i].contractAbi;
      const contractName = fromContracts[i].contractName;
      const contract = fromContracts[i].contractAddress;
      const r = `
      - kind: ${this.protocol.name}
        name: ${contractName}
        network: ${this.network}
        source: ${await protocolManifest.source({contract,contractName,network:this.network,etherscanApikey:this.etherscanApikey })}
        mapping: ${protocolManifest.mapping({abi,contractName})/*{ abi, contractName }*/}`
      result.push(r);
    }
    return result.join('');
  }


  async generateManifest() {
    // const protocolManifest = this.protocol.getManifestScaffold()
    
    return prettier.format(`
specVersion: 0.0.1
schema:
  file: ./schema.graphql
dataSources:
  ${await this.generateDataSource()}
`,
      { parser: 'yaml' },
    )
  }
  

  generateSchema(abi,contractName) {
    const hasEvents = this.protocol.hasEvents()
    const events = hasEvents
      ? abiEvents(abi).toJS()
      : []

    return prettier.format(
      hasEvents
        ? events.map(
            event => generateEventType(event, this.protocol.name, contractName)
          )
            .join('\n\n')
        : generateExampleEntityType(this.protocol, contractName , events),
      {
        parser: 'graphql',
      },
    )
  }

  generateSchemas = () => {

    let schema = []
    for (let i = 0; i< this.fromContracts.length; i++) {
      let fromContract = this.fromContracts[i]
      schema.push(this.generateSchema(fromContract.contractAbi, fromContract.contractName))
      // let templateContracts = fromContracts[i].templateContracts
      // for(let j = 0; j< templateContracts.length; j++) {
      //   let templateContract = templateContracts[j]
      //   schema.push(generateSchema(templateContract.contractAbi, templateContract.contractName, indexCallHandler))
      // }
    }
    return schema.join('\n')
  }

  generateTsConfig() {
    return prettier.format(
      JSON.stringify({
        extends: '@graphprotocol/graph-ts/types/tsconfig.base.json',
        include: ['src'],
      }),
      { parser: 'json' },
    )
  }

  generateMapping({ indexCallHandler, contract, isTemplateContract}) {
    const hasEvents = this.protocol.hasEvents()
    const events = hasEvents
      ? abiEvents(contract.contractAbi).toJS()
      : []
    let methods = hasEvents && indexCallHandler ? abiMethods(contract.contractAbi).toJS() : []
    const protocolMapping = this.protocol.getMappingScaffold()

    return prettier.format(
      hasEvents
        ? generateEventIndexingHandlers(
            events,
            contract,
            isTemplateContract,
            methods
          )
        : protocolMapping.generatePlaceholderHandlers({
            abi:contract.contractAbi,
            contractName:contract.contractName,
            events,
          }),
      { parser: 'typescript', semi: false },
    )
  }

  generateABIs() {
    return this.protocol.hasABIs()
      ? {
        [`${this.contractName}.json`]: prettier.format(JSON.stringify(this.abi.data), {
          parser: 'json',
        }),
      }
      : undefined
  }

  async generate() {
  const mappingMap = {};
  const abiMap = {};
  const fromContracts = this.fromContracts;
  const hasEvents = this.protocol.hasEvents();
  for(let i=0; i< fromContracts.length; i++) {
    mappingMap[`${fromContracts[i].contractName}Mapping.ts`] = this.generateMapping({
      indexEvents:this.indexEvents,
      contract: fromContracts[i],
      isTemplateContract: false,
      indexCallHandler: this.shouldIndexCallHandler(this.network),
    });
    abiMap[`${fromContracts[i].contractName}.json`] =  this.protocol.hasEvents()? prettier.format(JSON.stringify(fromContracts[i].contractAbi.data), {
      parser: 'json',
    }): '';

    let templateContracts = fromContracts[i].templateContracts;
    for (let j = 0; j < templateContracts.length; j++) {
      mappingMap[`${templateContracts[j].contractName}Mapping.ts`] = this.generateMapping({
        indexEvents:this.indexEvents,
        contract: templateContracts[j],
        isTemplateContract: true,
        indexCallHandler: this.shouldIndexCallHandler(this.network),
      });
      abiMap[`${templateContracts[j].contractName}.json`] = prettier.format(JSON.stringify(templateContracts[j].contractAbi.data), {
        parser: 'json',
      });
    }
  }
    return {
      'package.json': this.generatePackageJson(),
      'subgraph.yaml': await this.generateManifest(),
      'schema.graphql': this.generateSchemas(),
      'tsconfig.json': this.generateTsConfig(),
      src: mappingMap,
      abis: abiMap,
    }
  }
}

const { abiEvents } = require('../../../scaffold/schema')
const ABI = require('../abi');
const constant = require('../../../lib/constant');
const fetch = require('node-fetch')

const getStartBlock = async(address, network, etherscanApikey) => {

  if(constant.nonEtherscanSupportedNetworks.includes(network)){
    return 0;
  }

  let url = `https://${
    network === 'mainnet' ? 'api' : `api-${network}`
  }.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&sort=asc${etherscanApikey?'&apikey='+etherscanApikey:''}`;

  if(constant.etherscanNetworkApiDomainMap.has(network)){
    url = `https://${
      `api-${network}`
    }.${constant.etherscanNetworkApiDomainMap.get(network)}/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&sort=asc${etherscanApikey?'&apikey='+etherscanApikey:''}`;
  }

  let result = await fetch(url)
  let json = await result.json()
  let blockNumber = 0
  // Etherscan returns a JSON object that has a `status`, a `message` and
  // a `result` field. The `status` is '0' in case of errors and '1' in
  // case of success
  if (json.status === '1') {
    blockNumber = json.result.length>0? json.result[0].blockNumber:0;

  }
  console.log(`Start block number for contract ${address} is ${blockNumber}`);
  return blockNumber;
}

const source = async ({ contract, contractName,network, etherscanApikey }) => `
            address: '${contract}'
            abi: ${contractName}
            startBlock: ${ await getStartBlock(contract, network, etherscanApikey) }`

const mapping = ({ abi, contractName }) => `
            kind: ethereum/events
            apiVersion: 0.0.5
            language: wasm/assemblyscript
            entities:
               ${abiEvents(abi)
                .map(event => `- ${event.get('_alias')}`)
                .join('\n               ')}
            abis:
              - name: ${contractName}
                file: ./abis/${contractName}.json
            eventHandlers:
              ${abiEvents(abi)
                .map(
                  event => `
              - event: ${ABI.eventSignature(event)}
                handler: handle${event.get('_alias')}Event`,
                )
                .join('')}
            file: ./src/${contractName}Mapping.ts`

module.exports = {
  source,
  mapping,
}

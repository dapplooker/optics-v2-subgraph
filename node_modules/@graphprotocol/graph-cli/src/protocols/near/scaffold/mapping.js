const generatePlaceholderHandlers = ({ contractName }) =>
    `
  import { near, BigInt,log } from '@graphprotocol/graph-ts'
  import { ${contractName.slice(0, 3)}Transaction } from '../generated/schema'

  export function handleReceipt(
    receipt: near.ReceiptWithOutcome
  ): void {
    const actions = receipt.receipt.actions;
    log.info("lenght {}",[actions.length.toString()]);
    
    for (let i = 0; i < actions.length; i++) {
      handleAction(
        i.toString(),
        actions[i], 
        receipt.receipt, 
        receipt.block.header,
        receipt.outcome
      );
    }
  }
  
  function handleAction(
    index: String,
    action: near.ActionValue,
    receipt: near.ActionReceipt,
    blockHeader: near.BlockHeader,
    outcome: near.ExecutionOutcome
  ): void {
    if (action.kind == near.ActionKind.FUNCTION_CALL || action.kind == near.ActionKind.TRANSFER) {
      if(outcome.logs != null){
        log.info("getting transaction {}",[index+"-"+blockHeader.hash.toHexString()] );
        let entity = new ${contractName.slice(0, 3)}Transaction(index+"-"+blockHeader.hash.toHexString());
        entity.id = index+"-"+blockHeader.hash.toHexString()
        entity.signerId = receipt.signerId
        entity.kind = action.kind.toString()
        if(action.kind != near.ActionKind.FUNCTION_CALL){
          entity.methodName= "transfer"
          entity.deposit = action.toTransfer().deposit
        } else {
          entity.methodName = action.toFunctionCall().methodName
          entity.deposit = action.toFunctionCall().deposit
        }
        entity.receiverId = receipt.receiverId
        entity.blockTimestamp = BigInt.fromU64(blockHeader.timestampNanosec/1000000000)
        entity.blockNumber = BigInt.fromU64(blockHeader.height)
        entity.output = outcome.logs.toString();
        entity.gasPrice = receipt.gasPrice
        entity.gasBurnt = outcome.gasBurnt.toString();
        entity.save();
      }
    } else {
      log.info("Early return: {}", ["Not a function call"]);
    }
    return;
  }
`

module.exports = {
    generatePlaceholderHandlers,
}
